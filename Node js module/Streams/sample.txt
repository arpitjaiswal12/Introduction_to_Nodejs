A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

A database-management system (DBMS) is a collection of interrelated data and
a set of programs to access those data. The collection of data, usually referred to
as the database, contains information relevant to an enterprise. The primary goal
of a DBMS is to provide a way to store and retrieve database information that is
both convenient and efficient.
Database systems are designed to manage large bodies of information. Management of data involves both defining structures for storage of information
and providing mechanisms for the manipulation of information. In addition, the
database system must ensure the safety of the information stored, despite system
crashes or attempts at unauthorized access. If data are to be shared among several
users, the system must avoid possible anomalous results.
Because information is so important in most organizations, computer scientists have developed a large body of concepts and techniques for managing data.
These concepts and techniques form the focus of this book. This chapter briefly
introduces the principles of database systems.

View of Data
A database system is a collection of interrelated data and a set of programs that
allow users to access and modify these data. A major purpose of a database
system is to provide users with an abstract view of the data. That is, the system
hides certain details of how the data are stored and maintained.
1.3.1 Data Abstraction
For the system to be usable, it must retrieve data efficiently. The need for efficiency
has led designers to use complex data structures to represent data in the database.
Since many database-system users are not computer trained, developers hide the
complexity from users through several levels of abstraction, to simplify users’
interactions with the system:
• Physical level. The lowest level of abstraction describes how the data are actually stored. The physical level describes complex low-level data structures
in detail.
• Logical level. The next-higher level of abstraction describes what data are
stored in the database, and what relationships exist among those data. The
logical level thus describes the entire database in terms of a small number of
relatively simple structures. Although implementation of the simple structures at the logical level may involve complex physical-level structures, the
user of the logical level does not need to be aware of this complexity. This
is referred to as physical data independence. Database administrators, who
must decide what information to keep in the database, use the logical level
of abstraction.
• View level. The highest level of abstraction describes only part of the entire
database. Even though the logical level uses simpler structures, complexity
remains because of the variety of information stored in a large database.
Many users of the database system do not need all this information; instead,
they need to access only a part of the database. The view level of abstraction
exists to simplify their interaction with the system. The system may provide
many views for the same database.

1.3.2 Instances and Schemas
Databases change over time as information is inserted and deleted. The collection
of information stored in the database at a particular moment is called an instance
of the database. The overall design of the database is called the database schema.
Schemas are changed infrequently, if at all.
The concept of database schemas and instances can be understood by analogy
to a program written in a programming language. A database schema corresponds
to the variable declarations (along with associated type definitions) in a program.
Each variable has a particular value at a given instant. The values of the variables
in a program at a point in time correspond to an instance of a database schema.
Database systems have several schemas, partitioned according to the levels
of abstraction. The physical schema describes the database design at the physical
level, while the logical schema describes the database design at the logical level.
A database may also have several schemas at the view level, sometimes called
subschemas, that describe different views of the database.
Of these, the logical schema is by far the most important, in terms of its effect
on application programs, since programmers construct applications by using the
logical schema. The physical schema is hidden beneath the logical schema, and can
usually be changed easily without affecting application programs. Application
programs are said to exhibit physical data independence if they do not depend
on the physical schema, and thus need not be rewritten if the physical schema
changes.
We study languages for describing schemas after introducing the notion of
data models in the next section.
1.3.3 Data Models
Underlying the structure of a database is the data model: a collection of conceptual
tools for describing data, data relationships, data semantics, and consistency
constraints. A data model provides a way to describe the design of a database at
the physical, logical, and view levels.
1.4 Database Languages 9
There are a number of different data models that we shall cover in the text.
The data models can be classified into four different categories:
• Relational Model. The relational model uses a collection of tables to represent both data and the relationships among those data. Each table has multiple columns, and each column has a unique name. Tables are also known
as relations. The relational model is an example of a record-based model.
Record-based models are so named because the database is structured in
fixed-format records of several types. Each table contains records of a particular type. Each record type defines a fixed number of fields, or attributes.
The columns of the table correspond to the attributes of the record type. The
relational data model is the most widely used data model, and a vast majority of current database systems are based on the relational model. Chapters 2
through 8 cover the relational model in detail.
• Entity-Relationship Model. The entity-relationship (E-R) data model uses a
collection of basic objects, called entities, and relationships among these objects.
An entity is a “thing” or “object” in the real world that is distinguishable
from other objects. The entity-relationship model is widely used in database
design, and Chapter 7 explores it in detail.
• Object-Based Data Model. Object-oriented programming (especially in Java,
C++, or C#) has become the dominant software-development methodology.
This led to the development of an object-oriented data model that can be
seen as extending the E-R model with notions of encapsulation, methods
(functions), and object identity. The object-relational data model combines
features of the object-oriented data model and relational data model. Chapter 22 examines the object-relational data model.
• Semistructured Data Model. The semistructured data model permits the
specification of data where individual data items of the same type may have
different sets of attributes. This is in contrast to the data models mentioned
earlier, where every data item of a particular type must have the same set
of attributes. The Extensible Markup Language (XML) is widely used to
represent semistructured data. Chapter 23 covers it.
Historically, the network data model and the hierarchical data model preceded the relational data model. These models were tied closely to the underlying
implementation, and complicated the task of modeling data. As a result they are
used little now, except in old database code that is still in service in some places.
They are outlined online in Appendices D and E for interested readers.

Database Languages
A database system provides a data-definition language to specify the database
schema and a data-manipulation language to express database queries and up-
10 Chapter 1 Introduction
dates. In practice, the data-definition and data-manipulation languages are not
two separate languages; instead they simply form parts of a single database language, such as the widely used SQL language.
1.4.1 Data-Manipulation Language
A data-manipulation language (DML) is a language that enables users to access
or manipulate data as organized by the appropriate data model. The types of
access are:
• Retrieval of information stored in the database
• Insertion of new information into the database
• Deletion of information from the database
• Modification of information stored in the database
There are basically two types:
• Procedural DMLs require a user to specify what data are needed and how to
get those data.
• Declarative DMLs (also referred to as nonprocedural DMLs) require a user to
specify what data are needed without specifying how to get those data.
Declarative DMLs are usually easier to learn and use than are procedural
DMLs. However, since a user does not have to specify how to get the data, the
database system has to figure out an efficient means of accessing data.
A query is a statement requesting the retrieval of information. The portion of
a DML that involves information retrieval is called a query language. Although
technically incorrect, it is common practice to use the terms query language and
data-manipulation language synonymously.
There are a number of database query languages in use, either commercially
or experimentally. We study the most widely used query language, SQL, in Chapters 3, 4, and 5. We also study some other query languages in Chapter 6.
The levels of abstraction that we discussed in Section 1.3 apply not only
to defining or structuring data, but also to manipulating data. At the physical
level, we must define algorithms that allow efficient access to data. At higher
levels of abstraction, we emphasize ease of use. The goal is to allow humans
to interact efficiently with the system. The query processor component of the
database system (which we study in Chapters 12 and 13) translates DML queries
into sequences of actions at the physical level of the database system.
1.4.2 Data-Definition Language
We specify a database schema by a set of definitions expressed by a special
language called a data-definition language (DDL). The DDL is also used to specify
additional properties of the data.
1.4 Database Languages 11
We specify the storage structure and access methods used by the database
system by a set of statements in a special type of DDL called a data storage and
definition language. These statements define the implementation details of the
database schemas, which are usually hidden from the users.
The data values stored in the database must satisfy certain consistency constraints. For example, suppose the university requires that the account balance
of a department must never be negative. The DDL provides facilities to specify
such constraints. The database system checks these constraints every time the
database is updated. In general, a constraint can be an arbitrary predicate pertaining to the database. However, arbitrary predicates may be costly to test. Thus,
database systems implement integrity constraints that can be tested with minimal
overhead:
• Domain Constraints. A domain of possible values must be associated with
every attribute (for example, integer types, character types, date/time types).
Declaring an attribute to be of a particular domain acts as a constraint on the
values that it can take. Domain constraints are the most elementary form of
integrity constraint. They are tested easily by the system whenever a new
data item is entered into the database.
• Referential Integrity. There are cases where we wish to ensure that a value
that appears in one relation for a given set of attributes also appears in a certain set of attributes in another relation (referential integrity). For example,
the department listed for each course must be one that actually exists. More
precisely, the dept name value in a course record must appear in the dept name
attribute of some record of the department relation. Database modifications
can cause violations of referential integrity. When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the
violation.
• Assertions. An assertion is any condition that the database must always
satisfy. Domain constraints and referential-integrity constraints are special
forms of assertions. However, there are many constraints that we cannot
express by using only these special forms. For example, “Every department
must have at least five courses offered every semester” must be expressed as
an assertion. When an assertion is created, the system tests it for validity. If
the assertion is valid, then any future modification to the database is allowed
only if it does not cause that assertion to be violated.
• Authorization. We may want to differentiate among the users as far as the
type of access they are permitted on various data values in the database. These
differentiations are expressed in terms of authorization, the most common
being: read authorization, which allows reading, but not modification, of
data; insert authorization, which allows insertion of new data, but not modification of existing data; update authorization, which allows modification,
but not deletion, of data; and delete authorization, which allows deletion of
data. We may assign the user all, none, or a combination of these types of
authorization.
12 Chapter 1 Introduction
The DDL, just like any other programming language, gets as input some
instructions (statements) and generates some output. The output of the DDL is
placed in the data dictionary, which contains metadata— that is, data about data.
The data dictionary is considered to be a special type of table that can only be
accessed and updated by the database system itself (not a regular user). The
database system consults the data dictionary before reading or modifying actual
data.
